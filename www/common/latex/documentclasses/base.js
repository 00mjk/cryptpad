// Generated by LiveScript 1.6.0
(function(){
  'use strict';
  var Base, out$ = typeof exports != 'undefined' && exports || this;
  out$.Base = Base = (function(){
    Base.displayName = 'Base';
    var args, x$, prototype = Base.prototype, constructor = Base;
    args = Base.args = {};
    Base.prototype.options = {};
    function Base(generator, options){
      var i$, ref$, len$, opt, tmp, value, pt345, inch, textwidth, margins, oddsidemargin, marginparwidth;
      this.g = generator;
      if (options) {
        this.options = options;
      }
      this.g.newCounter('part');
      this.g.newCounter('section');
      this.g.newCounter('subsection', 'section');
      this.g.newCounter('subsubsection', 'subsection');
      this.g.newCounter('paragraph', 'subsubsection');
      this.g.newCounter('subparagraph', 'paragraph');
      this.g.newCounter('figure');
      this.g.newCounter('table');
      this.g.setLength('paperheight', {
        value: 11,
        unit: "in"
      });
      this.g.setLength('paperwidth', {
        value: 8.5,
        unit: "in"
      });
      this.g.setLength('@@size', {
        value: 10,
        unit: "pt"
      });
      for (i$ = 0, len$ = (ref$ = this.options).length; i$ < len$; ++i$) {
        opt = ref$[i$];
        opt = Object.keys(opt)[0];
        switch (opt) {
        case "oneside":
          break;
        case "twoside":
          break;
        case "onecolumn":
          break;
        case "twocolumn":
          break;
        case "titlepage":
          break;
        case "notitlepage":
          break;
        case "fleqn":
          break;
        case "leqno":
          break;
        case "a4paper":
          this.g.setLength('paperheight', {
            value: 297,
            unit: "mm"
          });
          this.g.setLength('paperwidth', {
            value: 210,
            unit: "mm"
          });
          break;
        case "a5paper":
          this.g.setLength('paperheight', {
            value: 210,
            unit: "mm"
          });
          this.g.setLength('paperwidth', {
            value: 148,
            unit: "mm"
          });
          break;
        case "b5paper":
          this.g.setLength('paperheight', {
            value: 250,
            unit: "mm"
          });
          this.g.setLength('paperwidth', {
            value: 176,
            unit: "mm"
          });
          break;
        case "letterpaper":
          this.g.setLength('paperheight', {
            value: 11,
            unit: "in"
          });
          this.g.setLength('paperwidth', {
            value: 8.5,
            unit: "in"
          });
          break;
        case "legalpaper":
          this.g.setLength('paperheight', {
            value: 14,
            unit: "in"
          });
          this.g.setLength('paperwidth', {
            value: 8.5,
            unit: "in"
          });
          break;
        case "executivepaper":
          this.g.setLength('paperheight', {
            value: 10.5,
            unit: "in"
          });
          this.g.setLength('paperwidth', {
            value: 7.25,
            unit: "in"
          });
          break;
        case "landscape":
          tmp = this.g.length('paperheight');
          this.g.setLength('paperheight', this.g.length('paperwidth'));
          this.g.setLength('paperwidth', tmp);
          break;
        default:
          value = parseFloat(opt);
          if (value !== NaN && opt.endsWith("pt") && String(value) === opt.substring(0, opt.length - 2)) {
            this.g.setLength('@@size', {
              value: value,
              unit: "pt"
            });
          }
        }
      }
      pt345 = this.g.toPx({
        value: 345,
        unit: "pt"
      });
      inch = this.g.toPx({
        value: 1,
        unit: "in"
      });
      textwidth = this.g.length('paperwidth').value - 2 * inch.value;
      if (textwidth > pt345.value) {
        textwidth = pt345.value;
      }
      this.g.setLength('textwidth', {
        value: textwidth,
        unit: "px"
      });
      this.g.setLength('marginparsep', {
        value: 11,
        unit: "pt"
      });
      this.g.setLength('marginparpush', {
        value: 5,
        unit: "pt"
      });
      margins = this.g.length('paperwidth').value - this.g.length('textwidth').value;
      oddsidemargin = 0.5 * margins - inch.value;
      marginparwidth = 0.5 * margins - this.g.length('marginparsep').value - 0.8 * inch.value;
      if (marginparwidth > 2 * inch.value) {
        marginparwidth = 2 * inch.value;
      }
      this.g.setLength('oddsidemargin', {
        value: oddsidemargin,
        unit: "px"
      });
      this.g.setLength('marginparwidth', {
        value: marginparwidth,
        unit: "px"
      });
    }
    Base.prototype['contentsname'] = function(){
      return ["Contents"];
    };
    Base.prototype['listfigurename'] = function(){
      return ["List of Figures"];
    };
    Base.prototype['listtablename'] = function(){
      return ["List of Tables"];
    };
    Base.prototype['partname'] = function(){
      return ["Part"];
    };
    Base.prototype['figurename'] = function(){
      return ["Figure"];
    };
    Base.prototype['tablename'] = function(){
      return ["Table"];
    };
    Base.prototype['appendixname'] = function(){
      return ["Appendix"];
    };
    Base.prototype['indexname'] = function(){
      return ["Index"];
    };
    x$ = args;
    x$['part'] = x$['section'] = x$['subsection'] = x$['subsubsection'] = x$['paragraph'] = x$['subparagraph'] = ['V', 's', 'X', 'o?', 'g'];
    Base.prototype['part'] = function(s, toc, ttl){
      return [this.g.startsection('part', 0, s, toc, ttl)];
    };
    Base.prototype['section'] = function(s, toc, ttl){
      return [this.g.startsection('section', 1, s, toc, ttl)];
    };
    Base.prototype['subsection'] = function(s, toc, ttl){
      return [this.g.startsection('subsection', 2, s, toc, ttl)];
    };
    Base.prototype['subsubsection'] = function(s, toc, ttl){
      return [this.g.startsection('subsubsection', 3, s, toc, ttl)];
    };
    Base.prototype['paragraph'] = function(s, toc, ttl){
      return [this.g.startsection('paragraph', 4, s, toc, ttl)];
    };
    Base.prototype['subparagraph'] = function(s, toc, ttl){
      return [this.g.startsection('subparagraph', 5, s, toc, ttl)];
    };
    Base.prototype['thepart'] = function(){
      return [this.g.Roman(this.g.counter('part'))];
    };
    Base.prototype['thesection'] = function(){
      return [this.g.arabic(this.g.counter('section'))];
    };
    Base.prototype['thesubsection'] = function(){
      return this.thesection().concat("." + this.g.arabic(this.g.counter('subsection')));
    };
    Base.prototype['thesubsubsection'] = function(){
      return this.thesubsection().concat("." + this.g.arabic(this.g.counter('subsubsection')));
    };
    Base.prototype['theparagraph'] = function(){
      return this.thesubsubsection().concat("." + this.g.arabic(this.g.counter('paragraph')));
    };
    Base.prototype['thesubparagraph'] = function(){
      return this.theparagraph().concat("." + this.g.arabic(this.g.counter('subparagraph')));
    };
    args['maketitle'] = ['V'];
    Base.prototype['maketitle'] = function(){
      var title, author, date, that, maketitle;
      this.g.setTitle(this._title);
      title = this.g.create(this.g.title, this._title);
      author = this.g.create(this.g.author, this._author);
      date = this.g.create(this.g.date, (that = this._date)
        ? that
        : this.g.macro('today'));
      maketitle = this.g.create(this.g.list, [
        this.g.createVSpace({
          value: 2,
          unit: "em"
        }), title, this.g.createVSpace({
          value: 1.5,
          unit: "em"
        }), author, this.g.createVSpace({
          value: 1,
          unit: "em"
        }), date, this.g.createVSpace({
          value: 1.5,
          unit: "em"
        })
      ], "center");
      this.g.setCounter('footnote', 0);
      this._title = null;
      this._author = null;
      this._date = null;
      this._thanks = null;
      this['title'] = this['author'] = this['date'] = this['thanks'] = this['and'] = this['maketitle'] = function(){};
      return [maketitle];
    };
    return Base;
  }());
}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kb2N1bWVudGNsYXNzZXMvYmFzZS5scyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztFQUFBOztjQUthLFFBQU4sUUFBQSxDQUFBOzs7SUFFSCxJQUFLLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQSxJQUFLLENBQUEsQ0FBQSxDQUFFO21CQUdmLFVBQVM7SUFHVCxRQUFBLENBQUEsSUFBQSxDQUFBLFNBQUEsRUFBQSxPQUFBOztNQUVJLElBQUMsQ0FBQSxDQUFFLENBQUEsQ0FBQSxDQUFFO01BQ2MsSUFBRyxPQUFIO1FBQW5CLElBQUMsQ0FBQSxPQUFRLENBQUEsQ0FBQSxDQUFFOztNQUVYLElBQUMsQ0FBQSxDQUFDLENBQUMsV0FBVyxNQUFBO01BQ2QsSUFBQyxDQUFBLENBQUMsQ0FBQyxXQUFXLFNBQUE7TUFDZCxJQUFDLENBQUEsQ0FBQyxDQUFDLFdBQVcsY0FBa0IsU0FBbEI7TUFDZCxJQUFDLENBQUEsQ0FBQyxDQUFDLFdBQVcsaUJBQWtCLFlBQWxCO01BQ2QsSUFBQyxDQUFBLENBQUMsQ0FBQyxXQUFXLGFBQWtCLGVBQWxCO01BQ2QsSUFBQyxDQUFBLENBQUMsQ0FBQyxXQUFXLGdCQUFrQixXQUFsQjtNQUVkLElBQUMsQ0FBQSxDQUFDLENBQUMsV0FBVyxRQUFBO01BQ2QsSUFBQyxDQUFBLENBQUMsQ0FBQyxXQUFXLE9BQUE7TUFNZCxJQUFDLENBQUEsQ0FBQyxDQUFDLFVBQVUsZUFBZTtRQUFFLE9BQU87UUFBSSxNQUFVO01BQXZCLENBQWY7TUFDYixJQUFDLENBQUEsQ0FBQyxDQUFDLFVBQVUsY0FBZTtRQUFFLE9BQU87UUFBSyxNQUFVO01BQXhCLENBQWY7TUFDYixJQUFDLENBQUEsQ0FBQyxDQUFDLFVBQVUsVUFBZTtRQUFFLE9BQU87UUFBSSxNQUFVO01BQXZCLENBQWY7TUFFYixpRUFBQTtRQUFJO1FBQ0EsR0FBSSxDQUFBLENBQUEsQ0FBRSxNQUFNLENBQUMsS0FBSyxHQUFELENBQUssQ0FBQyxDQUFEO1FBQ3RCLFFB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QSxDQUFDLENBQUMsT0FBTyxJQUFDLENBQUEsQ0FBQyxDQUFDLE1BQU07UUFDM0IsSUFBQyxDQUFBLENBQUMsQ0FBQyxhQUFhO1VBQUUsT0FBTztVQUFHLE1BQVU7UUFBdEIsQ0FBRCxHQUNmLE9BQ0EsSUFBQyxDQUFBLENBQUMsQ0FBQyxhQUFhO1VBQUUsT0FBTztVQUFLLE1BQVU7UUFBeEIsQ0FBRCxHQUNmLFFBQ0EsSUFBQyxDQUFBLENBQUMsQ0FBQyxhQUFhO1VBQUUsT0FBTztVQUFHLE1BQVU7UUFBdEIsQ0FBRCxHQUNmLE1BQ0EsSUFBQyxDQUFBLENBQUMsQ0FBQyxhQUFhO1VBQUUsT0FBTztVQUFLLE1BQVU7UUFBeEIsQ0FBRDtNQVBZLEdBUXBCLFFBUlc7TUFZdEIsSUFBQyxDQUFBLENBQUMsQ0FBQyxXQUFXLFlBQVUsQ0FBVjtNQUdkLElBQUMsQ0FBQSxNQUFPLENBQUEsQ0FBQSxDQUFFO01BQ1YsSUFBQyxDQUFBLE9BQVEsQ0FBQSxDQUFBLENBQUU7TUFDWCxJQUFDLENBQUEsS0FBTSxDQUFBLENBQUEsQ0FBRTtNQUNULElBQUMsQ0FBQSxPQUFRLENBQUEsQ0FBQSxDQUFFO01BRVgsSUFBQyxDQUFBLE9BQUEsQ0FBTyxDQUFBLENBQUEsQ0FBRSxJQUFDLENBQUEsUUFBQSxDQUFRLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQSxNQUFBLENBQU0sQ0FBQSxDQUFBLENBQUUsSUFBQyxDQUFBLFFBQUEsQ0FBUSxDQUFBLENBQUEsQ0FBRSxJQUFDLENBQUEsS0FBQSxDQUFLLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQSxXQUFBLENBQVcsQ0FBQSxDQUFBLENBQUUsUUFBQSxDQUFBO2FBRS9ELENBQUUsU0FBRiIsImZpbGUiOiJiYXNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cblxuIyBiYXNlIGNsYXNzIGZvciBhbGwgc3RhbmRhcmQgZG9jdW1lbnRjbGFzc2VzXG4jXG5leHBvcnQgY2xhc3MgQmFzZVxuXG4gICAgYXJncyA9IEBhcmdzID0ge31cblxuICAgICMgY2xhc3Mgb3B0aW9uc1xuICAgIG9wdGlvbnM6IHt9XG5cbiAgICAjIENUT1JcbiAgICAoZ2VuZXJhdG9yLCBvcHRpb25zKSAtPlxuXG4gICAgICAgIEBnID0gZ2VuZXJhdG9yXG4gICAgICAgIEBvcHRpb25zID0gb3B0aW9ucyBpZiBvcHRpb25zXG5cbiAgICAgICAgQGcubmV3Q291bnRlciBcXHBhcnRcbiAgICAgICAgQGcubmV3Q291bnRlciBcXHNlY3Rpb25cbiAgICAgICAgQGcubmV3Q291bnRlciBcXHN1YnNlY3Rpb24gICAgICAgXFxzZWN0aW9uXG4gICAgICAgIEBnLm5ld0NvdW50ZXIgXFxzdWJzdWJzZWN0aW9uICAgIFxcc3Vic2VjdGlvblxuICAgICAgICBAZy5uZXdDb3VudGVyIFxccGFyYWdyYXBoICAgICAgICBcXHN1YnN1YnNlY3Rpb25cbiAgICAgICAgQGcubmV3Q291bnRlciBcXHN1YnBhcmFncmFwaCAgICAgXFxwYXJhZ3JhcGhcblxuICAgICAgICBAZy5uZXdDb3VudGVyIFxcZmlndXJlXG4gICAgICAgIEBnLm5ld0NvdW50ZXIgXFx0YWJsZVxuXG5cblxuICAgICAgICAjIGRlZmF1bHQ6IGxldHRlcnBhcGVyLCAxMHB0LCBvbmVjb2x1bW4sIG9uZXNpZGVcblxuICAgICAgICBAZy5zZXRMZW5ndGggXFxwYXBlcmhlaWdodCAgIHsgdmFsdWU6IDExLCB1bml0OiBcImluXCIgfVxuICAgICAgICBAZy5zZXRMZW5ndGggXFxwYXBlcndpZHRoICAgIHsgdmFsdWU6IDguNSwgdW5pdDogXCJpblwiIH1cbiAgICAgICAgQGcuc2V0TGVuZ3RoIFxcQEBzaXplICAgICAgICB7IHZhbHVlOiAxMCwgdW5pdDogXCJwdFwiIH1cblxuICAgICAgICBmb3Igb3B0IGluIEBvcHRpb25zXG4gICAgICAgICAgICBvcHQgPSBPYmplY3Qua2V5cyhvcHQpLjBcbiAgICAgICAgICAgIHN3aXRjaCBvcHRcbiAgICAgICAgICAgIHwgXCJvbmVzaWRlXCIgPT5cbiAgICAgICAgICAgIHwgXCJ0d29zaWRlXCIgPT4gICAgICAjIHR3b3NpZGUgZG9lc24ndCBtYWtlIHNlbnNlIGluIHNpbmdsZS1wYWdlIEhUTUxcblxuICAgICAgICAgICAgfCBcIm9uZWNvbHVtblwiID0+ICAgICMgVE9ET1xuICAgICAgICAgICAgfCBcInR3b2NvbHVtblwiID0+XG5cbiAgICAgICAgICAgIHwgXCJ0aXRsZXBhZ2VcIiA9PiAgICAjIFRPRE9cbiAgICAgICAgICAgIHwgXCJub3RpdGxlcGFnZVwiID0+XG5cbiAgICAgICAgICAgIHwgXCJmbGVxblwiID0+XG4gICAgICAgICAgICB8IFwibGVxbm9cIiA9PlxuXG4gICAgICAgICAgICB8IFwiYTRwYXBlclwiID0+XG4gICAgICAgICAgICAgICAgQGcuc2V0TGVuZ3RoIFxccGFwZXJoZWlnaHQgICB7IHZhbHVlOiAyOTcsIHVuaXQ6IFwibW1cIiB9XG4gICAgICAgICAgICAgICAgQGcuc2V0TGVuZ3RoIFxccGFwZXJ3aWR0aCAgICB7IHZhbHVlOiAyMTAsIHVuaXQ6IFwibW1cIiB9XG4gICAgICAgICAgICB8IFwiYTVwYXBlclwiID0+XG4gICAgICAgICAgICAgICAgQGcuc2V0TGVuZ3RoIFxccGFwZXJoZWlnaHQgICB7IHZhbHVlOiAyMTAsIHVuaXQ6IFwibW1cIiB9XG4gICAgICAgICAgICAgICAgQGcuc2V0TGVuZ3RoIFxccGFwZXJ3aWR0aCAgICB7IHZhbHVlOiAxNDgsIHVuaXQ6IFwibW1cIiB9XG4gICAgICAgICAgICB8IFwiYjVwYXBlclwiID0+XG4gICAgICAgICAgICAgICAgQGcuc2V0TGVuZ3RoIFxccGFwZXJoZWlnaHQgICB7IHZhbHVlOiAyNTAsIHVuaXQ6IFwibW1cIiB9XG4gICAgICAgICAgICAgICAgQGcuc2V0TGVuZ3RoIFxccGFwZXJ3aWR0aCAgICB7IHZhbHVlOiAxNzYsIHVuaXQ6IFwibW1cIiB9XG4gICAgICAgICAgICB8IFwibGV0dGVycGFwZXJcIiA9PlxuICAgICAgICAgICAgICAgIEBnLnNldExlbmd0aCBcXHBhcGVyaGVpZ2h0ICAgeyB2YWx1ZTogMTEsIHVuaXQ6IFwiaW5cIiB9XG4gICAgICAgICAgICAgICAgQGcuc2V0TGVuZ3RoIFxccGFwZXJ3aWR0aCAgICB7IHZhbHVlOiA4LjUsIHVuaXQ6IFwiaW5cIiB9XG4gICAgICAgICAgICB8IFwibGVnYWxwYXBlclwiID0+XG4gICAgICAgICAgICAgICAgQGcuc2V0TGVuZ3RoIFxccGFwZXJoZWlnaHQgICB7IHZhbHVlOiAxNCwgdW5pdDogXCJpblwiIH1cbiAgICAgICAgICAgICAgICBAZy5zZXRMZW5ndGggXFxwYXBlcndpZHRoICAgIHsgdmFsdWU6IDguNSwgdW5pdDogXCJpblwiIH1cbiAgICAgICAgICAgIHwgXCJleGVjdXRpdmVwYXBlclwiID0+XG4gICAgICAgICAgICAgICAgQGcuc2V0TGVuZ3RoIFxccGFwZXJoZWlnaHQgICB7IHZhbHVlOiAxMC41LCB1bml0OiBcImluXCIgfVxuICAgICAgICAgICAgICAgIEBnLnNldExlbmd0aCBcXHBhcGVyd2lkdGggICAgeyB2YWx1ZTogNy4yNSwgdW5pdDogXCJpblwiIH1cbiAgICAgICAgICAgIHwgXCJsYW5kc2NhcGVcIiA9PlxuICAgICAgICAgICAgICAgIHRtcCA9IEBnLmxlbmd0aCBcXHBhcGVyaGVpZ2h0XG4gICAgICAgICAgICAgICAgQGcuc2V0TGVuZ3RoIFxccGFwZXJoZWlnaHQgICBAZy5sZW5ndGggXFxwYXBlcndpZHRoXG4gICAgICAgICAgICAgICAgQGcuc2V0TGVuZ3RoIFxccGFwZXJ3aWR0aCAgICB0bXBcblxuICAgICAgICAgICAgfCBvdGhlcndpc2UgPT5cbiAgICAgICAgICAgICAgICAjIGNoZWNrIGlmIGEgcG9pbnQgc2l6ZSB3YXMgZ2l2ZW5cbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHBhcnNlRmxvYXQgb3B0XG4gICAgICAgICAgICAgICAgaWYgdmFsdWUgIT0gTmFOIGFuZCBvcHQuZW5kc1dpdGggXCJwdFwiIGFuZCBTdHJpbmcodmFsdWUpID09IG9wdC5zdWJzdHJpbmcgMCwgb3B0Lmxlbmd0aCAtIDJcbiAgICAgICAgICAgICAgICAgICAgQGcuc2V0TGVuZ3RoIFxcQEBzaXplICB7IHZhbHVlLCB1bml0OiBcInB0XCIgfVxuXG5cblxuICAgICAgICAjIyB0ZXh0d2lkdGhcblxuICAgICAgICBwdDM0NSA9IEBnLnRvUHggeyB2YWx1ZTogMzQ1LCB1bml0OiBcInB0XCIgfVxuICAgICAgICBpbmNoID0gQGcudG9QeCB7IHZhbHVlOiAxLCB1bml0OiBcImluXCIgfVxuXG4gICAgICAgIHRleHR3aWR0aCA9IEBnLmxlbmd0aChcXHBhcGVyd2lkdGgpLnZhbHVlIC0gMippbmNoLnZhbHVlXG4gICAgICAgIGlmIHRleHR3aWR0aCA+IHB0MzQ1LnZhbHVlXG4gICAgICAgICAgICB0ZXh0d2lkdGggPSBwdDM0NS52YWx1ZVxuXG4gICAgICAgIEBnLnNldExlbmd0aCBcXHRleHR3aWR0aCB7IHZhbHVlOiB0ZXh0d2lkdGgsIHVuaXQ6IFwicHhcIiB9XG5cblxuICAgICAgICAjIyBtYXJnaW5zXG5cbiAgICAgICAgQGcuc2V0TGVuZ3RoIFxcbWFyZ2lucGFyc2VwIHsgdmFsdWU6IDExLCB1bml0OiBcInB0XCIgfVxuICAgICAgICBAZy5zZXRMZW5ndGggXFxtYXJnaW5wYXJwdXNoIHsgdmFsdWU6IDUsIHVuaXQ6IFwicHRcIiB9XG5cbiAgICAgICAgIyBpbiBweFxuICAgICAgICBtYXJnaW5zID0gQGcubGVuZ3RoKFxccGFwZXJ3aWR0aCkudmFsdWUgLSBAZy5sZW5ndGgoXFx0ZXh0d2lkdGgpLnZhbHVlXG4gICAgICAgIG9kZHNpZGVtYXJnaW4gPSAwLjUgKiBtYXJnaW5zIC0gaW5jaC52YWx1ZVxuICAgICAgICBtYXJnaW5wYXJ3aWR0aCA9IDAuNSAqIG1hcmdpbnMgLSBAZy5sZW5ndGgoXFxtYXJnaW5wYXJzZXApLnZhbHVlIC0gMC44ICogaW5jaC52YWx1ZVxuICAgICAgICBpZiBtYXJnaW5wYXJ3aWR0aCA+IDIqaW5jaC52YWx1ZVxuICAgICAgICAgICAgbWFyZ2lucGFyd2lkdGggPSAyKmluY2gudmFsdWVcblxuICAgICAgICBAZy5zZXRMZW5ndGggXFxvZGRzaWRlbWFyZ2luIHsgdmFsdWU6IG9kZHNpZGVtYXJnaW4sIHVuaXQ6IFwicHhcIiB9XG4gICAgICAgIEBnLnNldExlbmd0aCBcXG1hcmdpbnBhcndpZHRoIHsgdmFsdWU6IG1hcmdpbnBhcndpZHRoLCB1bml0OiBcInB4XCIgfVxuXG4gICAgICAgICMgXFxldmVuc2lkZW1hcmdpbiA9IFxccGFwZXJ3aWR0aCAtIDJpbiAtIFxcdGV4dHdpZHRoIC0gXFxvZGRzaWRlbWFyZ2luXG4gICAgICAgICMgXFxAc2V0dG9wb2ludFxcZXZlbnNpZGVtYXJnaW5cblxuXG5cbiAgICBcXGNvbnRlbnRzbmFtZSAgICAgICA6LT4gWyBcIkNvbnRlbnRzXCIgXVxuICAgIFxcbGlzdGZpZ3VyZW5hbWUgICAgIDotPiBbIFwiTGlzdCBvZiBGaWd1cmVzXCIgXVxuICAgIFxcbGlzdHRhYmxlbmFtZSAgICAgIDotPiBbIFwiTGlzdCBvZiBUYWJsZXNcIiBdXG5cbiAgICBcXHBhcnRuYW1lICAgICAgICAgICA6LT4gWyBcIlBhcnRcIiBdXG5cbiAgICBcXGZpZ3VyZW5hbWUgICAgICAgICA6LT4gWyBcIkZpZ3VyZVwiIF1cbiAgICBcXHRhYmxlbmFtZSAgICAgICAgICA6LT4gWyBcIlRhYmxlXCIgXVxuXG4gICAgXFxhcHBlbmRpeG5hbWUgICAgICAgOi0+IFsgXCJBcHBlbmRpeFwiIF1cbiAgICBcXGluZGV4bmFtZSAgICAgICAgICA6LT4gWyBcIkluZGV4XCIgXVxuXG5cbiAgICAjIyMjIyMjIyMjIyMjI1xuICAgICMgc2VjdGlvbmluZyAjXG4gICAgIyMjIyMjIyMjIyMjIyNcblxuICAgIGFyZ3NcbiAgICAgLi5cXHBhcnQgPSAgICAgICAgICBcXFxuICAgICAuLlxcc2VjdGlvbiA9ICAgICAgIFxcXG4gICAgIC4uXFxzdWJzZWN0aW9uID0gICAgXFxcbiAgICAgLi5cXHN1YnN1YnNlY3Rpb24gPSBcXFxuICAgICAuLlxccGFyYWdyYXBoID0gICAgIFxcXG4gICAgIC4uXFxzdWJwYXJhZ3JhcGggPSAgPFsgViBzIFggbz8gZyBdPlxuXG5cbiAgICBcXHBhcnQgICAgICAgICAgICAgICA6IChzLCB0b2MsIHR0bCkgLT4gWyBAZy5zdGFydHNlY3Rpb24gXFxwYXJ0LCAgICAgICAgICAgMCwgcywgdG9jLCB0dGwgXVxuICAgIFxcc2VjdGlvbiAgICAgICAgICAgIDogKHMsIHRvYywgdHRsKSAtPiBbIEBnLnN0YXJ0c2VjdGlvbiBcXHNlY3Rpb24sICAgICAgICAxLCBzLCB0b2MsIHR0bCBdXG4gICAgXFxzdWJzZWN0aW9uICAgICAgICAgOiAocywgdG9jLCB0dGwpIC0+IFsgQGcuc3RhcnRzZWN0aW9uIFxcc3Vic2VjdGlvbiwgICAgIDIsIHMsIHRvYywgdHRsIF1cbiAgICBcXHN1YnN1YnNlY3Rpb24gICAgICA6IChzLCB0b2MsIHR0bCkgLT4gWyBAZy5zdGFydHNlY3Rpb24gXFxzdWJzdWJzZWN0aW9uLCAgMywgcywgdG9jLCB0dGwgXVxuICAgIFxccGFyYWdyYXBoICAgICAgICAgIDogKHMsIHRvYywgdHRsKSAtPiBbIEBnLnN0YXJ0c2VjdGlvbiBcXHBhcmFncmFwaCwgICAgICA0LCBzLCB0b2MsIHR0bCBdXG4gICAgXFxzdWJwYXJhZ3JhcGggICAgICAgOiAocywgdG9jLCB0dGwpIC0+IFsgQGcuc3RhcnRzZWN0aW9uIFxcc3VicGFyYWdyYXBoLCAgIDUsIHMsIHRvYywgdHRsIF1cblxuXG4gICAgXFx0aGVwYXJ0ICAgICAgICAgICAgOi0+IFsgQGcuUm9tYW4gQGcuY291bnRlciBcXHBhcnQgXVxuICAgIFxcdGhlc2VjdGlvbiAgICAgICAgIDotPiBbIEBnLmFyYWJpYyBAZy5jb3VudGVyIFxcc2VjdGlvbiBdXG4gICAgXFx0aGVzdWJzZWN0aW9uICAgICAgOi0+IEB0aGVzZWN0aW9uISAgICAgICArKyBcIi5cIiArIEBnLmFyYWJpYyBAZy5jb3VudGVyIFxcc3Vic2VjdGlvblxuICAgIFxcdGhlc3Vic3Vic2VjdGlvbiAgIDotPiBAdGhlc3Vic2VjdGlvbiEgICAgKysgXCIuXCIgKyBAZy5hcmFiaWMgQGcuY291bnRlciBcXHN1YnN1YnNlY3Rpb25cbiAgICBcXHRoZXBhcmFncmFwaCAgICAgICA6LT4gQHRoZXN1YnN1YnNlY3Rpb24hICsrIFwiLlwiICsgQGcuYXJhYmljIEBnLmNvdW50ZXIgXFxwYXJhZ3JhcGhcbiAgICBcXHRoZXN1YnBhcmFncmFwaCAgICA6LT4gQHRoZXBhcmFncmFwaCEgICAgICsrIFwiLlwiICsgQGcuYXJhYmljIEBnLmNvdW50ZXIgXFxzdWJwYXJhZ3JhcGhcblxuXG4gICAgIyB0aXRsZVxuXG4gICAgYXJncy5cXG1ha2V0aXRsZSA9ICAgPFsgViBdPlxuXG4gICAgXFxtYWtldGl0bGUgICAgICAgICAgOi0+XG4gICAgICAgIEBnLnNldFRpdGxlIEBfdGl0bGVcblxuICAgICAgICB0aXRsZSA9IEBnLmNyZWF0ZSBAZy50aXRsZSwgQF90aXRsZVxuICAgICAgICBhdXRob3IgPSBAZy5jcmVhdGUgQGcuYXV0aG9yLCBAX2F1dGhvclxuICAgICAgICBkYXRlID0gQGcuY3JlYXRlIEBnLmRhdGUsIGlmIEBfZGF0ZSB0aGVuIHRoYXQgZWxzZSBAZy5tYWNybyBcXHRvZGF5XG5cbiAgICAgICAgbWFrZXRpdGxlID0gQGcuY3JlYXRlIEBnLmxpc3QsIFtcbiAgICAgICAgICAgIEBnLmNyZWF0ZVZTcGFjZSh7IHZhbHVlOiAyLCB1bml0OiBcImVtXCJ9KVxuICAgICAgICAgICAgdGl0bGVcbiAgICAgICAgICAgIEBnLmNyZWF0ZVZTcGFjZSh7IHZhbHVlOiAxLjUsIHVuaXQ6IFwiZW1cIn0pXG4gICAgICAgICAgICBhdXRob3JcbiAgICAgICAgICAgIEBnLmNyZWF0ZVZTcGFjZSh7IHZhbHVlOiAxLCB1bml0OiBcImVtXCJ9KVxuICAgICAgICAgICAgZGF0ZVxuICAgICAgICAgICAgQGcuY3JlYXRlVlNwYWNlKHsgdmFsdWU6IDEuNSwgdW5pdDogXCJlbVwifSlcbiAgICAgICAgXSwgXCJjZW50ZXJcIlxuXG5cbiAgICAgICAgIyByZXNldCBmb290bm90ZSBiYWNrIHRvIDBcbiAgICAgICAgQGcuc2V0Q291bnRlciBcXGZvb3Rub3RlIDBcblxuICAgICAgICAjIHJlc2V0IC0gbWFrZXRpdGxlIGNhbiBvbmx5IGJlIHVzZWQgb25jZVxuICAgICAgICBAX3RpdGxlID0gbnVsbFxuICAgICAgICBAX2F1dGhvciA9IG51bGxcbiAgICAgICAgQF9kYXRlID0gbnVsbFxuICAgICAgICBAX3RoYW5rcyA9IG51bGxcblxuICAgICAgICBAXFx0aXRsZSA9IEBcXGF1dGhvciA9IEBcXGRhdGUgPSBAXFx0aGFua3MgPSBAXFxhbmQgPSBAXFxtYWtldGl0bGUgPSAhLT5cblxuICAgICAgICBbIG1ha2V0aXRsZSBdXG4iXX0=
